#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'UdpReport'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 60

# The Active Message type associated with this message.
AM_TYPE = -1

class UdpReport(tinyos.message.Message.Message):
    # Create a new UdpReport of size 60.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=60):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <UdpReport> \n"
        try:
            s += "  [seqno=0x%x]\n" % (self.get_seqno())
        except:
            pass
        try:
            s += "  [lTime=0x%x]\n" % (self.get_lTime())
        except:
            pass
        try:
            s += "  [unixTime=0x%x]\n" % (self.get_unixTime())
        except:
            pass
        try:
            s += "  [watchdogMinutes=0x%x]\n" % (self.get_watchdogMinutes())
        except:
            pass
        try:
            s += "  [sender=0x%x]\n" % (self.get_sender())
        except:
            pass
        try:
            s += "  [senseRate=0x%x]\n" % (self.get_senseRate())
        except:
            pass
        try:
            s += "  [reportRate=0x%x]\n" % (self.get_reportRate())
        except:
            pass
        try:
            s += "  [ip.sent=0x%x]\n" % (self.get_ip_sent())
        except:
            pass
        try:
            s += "  [ip.forwarded=0x%x]\n" % (self.get_ip_forwarded())
        except:
            pass
        try:
            s += "  [ip.rx_drop=0x%x]\n" % (self.get_ip_rx_drop())
        except:
            pass
        try:
            s += "  [ip.tx_drop=0x%x]\n" % (self.get_ip_tx_drop())
        except:
            pass
        try:
            s += "  [ip.fw_drop=0x%x]\n" % (self.get_ip_fw_drop())
        except:
            pass
        try:
            s += "  [ip.rx_total=0x%x]\n" % (self.get_ip_rx_total())
        except:
            pass
        try:
            s += "  [ip.encfail=0x%x]\n" % (self.get_ip_encfail())
        except:
            pass
        try:
            s += "  [route.hop_limit=0x%x]\n" % (self.get_route_hop_limit())
        except:
            pass
        try:
            s += "  [route.parent=0x%x]\n" % (self.get_route_parent())
        except:
            pass
        try:
            s += "  [route.parent_metric=0x%x]\n" % (self.get_route_parent_metric())
        except:
            pass
        try:
            s += "  [route.parent_etx=0x%x]\n" % (self.get_route_parent_etx())
        except:
            pass
        try:
            s += "  [rssi=0x%x]\n" % (self.get_rssi())
        except:
            pass
        try:
            s += "  [temp=0x%x]\n" % (self.get_temp())
        except:
            pass
        try:
            s += "  [hum=0x%x]\n" % (self.get_hum())
        except:
            pass
        try:
            s += "  [par=0x%x]\n" % (self.get_par())
        except:
            pass
        try:
            s += "  [tsr=0x%x]\n" % (self.get_tsr())
        except:
            pass
        try:
            s += "  [battvol=0x%x]\n" % (self.get_battvol())
        except:
            pass
        try:
            s += "  [solarvol=0x%x]\n" % (self.get_solarvol())
        except:
            pass
        try:
            s += "  [solarcur=0x%x]\n" % (self.get_solarcur())
        except:
            pass
        try:
            s += "  [intvol=0x%x]\n" % (self.get_intvol())
        except:
            pass
        try:
            s += "  [ecount=0x%x]\n" % (self.get_ecount())
        except:
            pass
        try:
            s += "  [blockID=0x%x]\n" % (self.get_blockID())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: seqno
    #   Field type: int
    #   Offset (bits): 0
    #   Size (bits): 16
    #

    #
    # Return whether the field 'seqno' is signed (False).
    #
    def isSigned_seqno(self):
        return False
    
    #
    # Return whether the field 'seqno' is an array (False).
    #
    def isArray_seqno(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'seqno'
    #
    def offset_seqno(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'seqno'
    #
    def offsetBits_seqno(self):
        return 0
    
    #
    # Return the value (as a int) of the field 'seqno'
    #
    def get_seqno(self):
        return self.getUIntElement(self.offsetBits_seqno(), 16, 1)
    
    #
    # Set the value of the field 'seqno'
    #
    def set_seqno(self, value):
        self.setUIntElement(self.offsetBits_seqno(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'seqno'
    #
    def size_seqno(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'seqno'
    #
    def sizeBits_seqno(self):
        return 16
    
    #
    # Accessor methods for field: lTime
    #   Field type: long
    #   Offset (bits): 16
    #   Size (bits): 32
    #

    #
    # Return whether the field 'lTime' is signed (False).
    #
    def isSigned_lTime(self):
        return False
    
    #
    # Return whether the field 'lTime' is an array (False).
    #
    def isArray_lTime(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'lTime'
    #
    def offset_lTime(self):
        return (16 / 8)
    
    #
    # Return the offset (in bits) of the field 'lTime'
    #
    def offsetBits_lTime(self):
        return 16
    
    #
    # Return the value (as a long) of the field 'lTime'
    #
    def get_lTime(self):
        return self.getUIntElement(self.offsetBits_lTime(), 32, 1)
    
    #
    # Set the value of the field 'lTime'
    #
    def set_lTime(self, value):
        self.setUIntElement(self.offsetBits_lTime(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'lTime'
    #
    def size_lTime(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'lTime'
    #
    def sizeBits_lTime(self):
        return 32
    
    #
    # Accessor methods for field: unixTime
    #   Field type: long
    #   Offset (bits): 48
    #   Size (bits): 32
    #

    #
    # Return whether the field 'unixTime' is signed (False).
    #
    def isSigned_unixTime(self):
        return False
    
    #
    # Return whether the field 'unixTime' is an array (False).
    #
    def isArray_unixTime(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'unixTime'
    #
    def offset_unixTime(self):
        return (48 / 8)
    
    #
    # Return the offset (in bits) of the field 'unixTime'
    #
    def offsetBits_unixTime(self):
        return 48
    
    #
    # Return the value (as a long) of the field 'unixTime'
    #
    def get_unixTime(self):
        return self.getUIntElement(self.offsetBits_unixTime(), 32, 1)
    
    #
    # Set the value of the field 'unixTime'
    #
    def set_unixTime(self, value):
        self.setUIntElement(self.offsetBits_unixTime(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'unixTime'
    #
    def size_unixTime(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'unixTime'
    #
    def sizeBits_unixTime(self):
        return 32
    
    #
    # Accessor methods for field: watchdogMinutes
    #   Field type: int
    #   Offset (bits): 80
    #   Size (bits): 16
    #

    #
    # Return whether the field 'watchdogMinutes' is signed (False).
    #
    def isSigned_watchdogMinutes(self):
        return False
    
    #
    # Return whether the field 'watchdogMinutes' is an array (False).
    #
    def isArray_watchdogMinutes(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'watchdogMinutes'
    #
    def offset_watchdogMinutes(self):
        return (80 / 8)
    
    #
    # Return the offset (in bits) of the field 'watchdogMinutes'
    #
    def offsetBits_watchdogMinutes(self):
        return 80
    
    #
    # Return the value (as a int) of the field 'watchdogMinutes'
    #
    def get_watchdogMinutes(self):
        return self.getUIntElement(self.offsetBits_watchdogMinutes(), 16, 1)
    
    #
    # Set the value of the field 'watchdogMinutes'
    #
    def set_watchdogMinutes(self, value):
        self.setUIntElement(self.offsetBits_watchdogMinutes(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'watchdogMinutes'
    #
    def size_watchdogMinutes(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'watchdogMinutes'
    #
    def sizeBits_watchdogMinutes(self):
        return 16
    
    #
    # Accessor methods for field: sender
    #   Field type: int
    #   Offset (bits): 96
    #   Size (bits): 16
    #

    #
    # Return whether the field 'sender' is signed (False).
    #
    def isSigned_sender(self):
        return False
    
    #
    # Return whether the field 'sender' is an array (False).
    #
    def isArray_sender(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'sender'
    #
    def offset_sender(self):
        return (96 / 8)
    
    #
    # Return the offset (in bits) of the field 'sender'
    #
    def offsetBits_sender(self):
        return 96
    
    #
    # Return the value (as a int) of the field 'sender'
    #
    def get_sender(self):
        return self.getUIntElement(self.offsetBits_sender(), 16, 1)
    
    #
    # Set the value of the field 'sender'
    #
    def set_sender(self, value):
        self.setUIntElement(self.offsetBits_sender(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'sender'
    #
    def size_sender(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'sender'
    #
    def sizeBits_sender(self):
        return 16
    
    #
    # Accessor methods for field: senseRate
    #   Field type: int
    #   Offset (bits): 112
    #   Size (bits): 16
    #

    #
    # Return whether the field 'senseRate' is signed (False).
    #
    def isSigned_senseRate(self):
        return False
    
    #
    # Return whether the field 'senseRate' is an array (False).
    #
    def isArray_senseRate(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'senseRate'
    #
    def offset_senseRate(self):
        return (112 / 8)
    
    #
    # Return the offset (in bits) of the field 'senseRate'
    #
    def offsetBits_senseRate(self):
        return 112
    
    #
    # Return the value (as a int) of the field 'senseRate'
    #
    def get_senseRate(self):
        return self.getUIntElement(self.offsetBits_senseRate(), 16, 1)
    
    #
    # Set the value of the field 'senseRate'
    #
    def set_senseRate(self, value):
        self.setUIntElement(self.offsetBits_senseRate(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'senseRate'
    #
    def size_senseRate(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'senseRate'
    #
    def sizeBits_senseRate(self):
        return 16
    
    #
    # Accessor methods for field: reportRate
    #   Field type: int
    #   Offset (bits): 128
    #   Size (bits): 16
    #

    #
    # Return whether the field 'reportRate' is signed (False).
    #
    def isSigned_reportRate(self):
        return False
    
    #
    # Return whether the field 'reportRate' is an array (False).
    #
    def isArray_reportRate(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'reportRate'
    #
    def offset_reportRate(self):
        return (128 / 8)
    
    #
    # Return the offset (in bits) of the field 'reportRate'
    #
    def offsetBits_reportRate(self):
        return 128
    
    #
    # Return the value (as a int) of the field 'reportRate'
    #
    def get_reportRate(self):
        return self.getUIntElement(self.offsetBits_reportRate(), 16, 1)
    
    #
    # Set the value of the field 'reportRate'
    #
    def set_reportRate(self, value):
        self.setUIntElement(self.offsetBits_reportRate(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'reportRate'
    #
    def size_reportRate(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'reportRate'
    #
    def sizeBits_reportRate(self):
        return 16
    
    #
    # Accessor methods for field: ip.sent
    #   Field type: int
    #   Offset (bits): 144
    #   Size (bits): 16
    #

    #
    # Return whether the field 'ip.sent' is signed (False).
    #
    def isSigned_ip_sent(self):
        return False
    
    #
    # Return whether the field 'ip.sent' is an array (False).
    #
    def isArray_ip_sent(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.sent'
    #
    def offset_ip_sent(self):
        return (144 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.sent'
    #
    def offsetBits_ip_sent(self):
        return 144
    
    #
    # Return the value (as a int) of the field 'ip.sent'
    #
    def get_ip_sent(self):
        return self.getUIntElement(self.offsetBits_ip_sent(), 16, 1)
    
    #
    # Set the value of the field 'ip.sent'
    #
    def set_ip_sent(self, value):
        self.setUIntElement(self.offsetBits_ip_sent(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.sent'
    #
    def size_ip_sent(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.sent'
    #
    def sizeBits_ip_sent(self):
        return 16
    
    #
    # Accessor methods for field: ip.forwarded
    #   Field type: int
    #   Offset (bits): 160
    #   Size (bits): 16
    #

    #
    # Return whether the field 'ip.forwarded' is signed (False).
    #
    def isSigned_ip_forwarded(self):
        return False
    
    #
    # Return whether the field 'ip.forwarded' is an array (False).
    #
    def isArray_ip_forwarded(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.forwarded'
    #
    def offset_ip_forwarded(self):
        return (160 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.forwarded'
    #
    def offsetBits_ip_forwarded(self):
        return 160
    
    #
    # Return the value (as a int) of the field 'ip.forwarded'
    #
    def get_ip_forwarded(self):
        return self.getUIntElement(self.offsetBits_ip_forwarded(), 16, 1)
    
    #
    # Set the value of the field 'ip.forwarded'
    #
    def set_ip_forwarded(self, value):
        self.setUIntElement(self.offsetBits_ip_forwarded(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.forwarded'
    #
    def size_ip_forwarded(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.forwarded'
    #
    def sizeBits_ip_forwarded(self):
        return 16
    
    #
    # Accessor methods for field: ip.rx_drop
    #   Field type: short
    #   Offset (bits): 176
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.rx_drop' is signed (False).
    #
    def isSigned_ip_rx_drop(self):
        return False
    
    #
    # Return whether the field 'ip.rx_drop' is an array (False).
    #
    def isArray_ip_rx_drop(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.rx_drop'
    #
    def offset_ip_rx_drop(self):
        return (176 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.rx_drop'
    #
    def offsetBits_ip_rx_drop(self):
        return 176
    
    #
    # Return the value (as a short) of the field 'ip.rx_drop'
    #
    def get_ip_rx_drop(self):
        return self.getUIntElement(self.offsetBits_ip_rx_drop(), 8, 1)
    
    #
    # Set the value of the field 'ip.rx_drop'
    #
    def set_ip_rx_drop(self, value):
        self.setUIntElement(self.offsetBits_ip_rx_drop(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.rx_drop'
    #
    def size_ip_rx_drop(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.rx_drop'
    #
    def sizeBits_ip_rx_drop(self):
        return 8
    
    #
    # Accessor methods for field: ip.tx_drop
    #   Field type: short
    #   Offset (bits): 184
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.tx_drop' is signed (False).
    #
    def isSigned_ip_tx_drop(self):
        return False
    
    #
    # Return whether the field 'ip.tx_drop' is an array (False).
    #
    def isArray_ip_tx_drop(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.tx_drop'
    #
    def offset_ip_tx_drop(self):
        return (184 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.tx_drop'
    #
    def offsetBits_ip_tx_drop(self):
        return 184
    
    #
    # Return the value (as a short) of the field 'ip.tx_drop'
    #
    def get_ip_tx_drop(self):
        return self.getUIntElement(self.offsetBits_ip_tx_drop(), 8, 1)
    
    #
    # Set the value of the field 'ip.tx_drop'
    #
    def set_ip_tx_drop(self, value):
        self.setUIntElement(self.offsetBits_ip_tx_drop(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.tx_drop'
    #
    def size_ip_tx_drop(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.tx_drop'
    #
    def sizeBits_ip_tx_drop(self):
        return 8
    
    #
    # Accessor methods for field: ip.fw_drop
    #   Field type: short
    #   Offset (bits): 192
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.fw_drop' is signed (False).
    #
    def isSigned_ip_fw_drop(self):
        return False
    
    #
    # Return whether the field 'ip.fw_drop' is an array (False).
    #
    def isArray_ip_fw_drop(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.fw_drop'
    #
    def offset_ip_fw_drop(self):
        return (192 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.fw_drop'
    #
    def offsetBits_ip_fw_drop(self):
        return 192
    
    #
    # Return the value (as a short) of the field 'ip.fw_drop'
    #
    def get_ip_fw_drop(self):
        return self.getUIntElement(self.offsetBits_ip_fw_drop(), 8, 1)
    
    #
    # Set the value of the field 'ip.fw_drop'
    #
    def set_ip_fw_drop(self, value):
        self.setUIntElement(self.offsetBits_ip_fw_drop(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.fw_drop'
    #
    def size_ip_fw_drop(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.fw_drop'
    #
    def sizeBits_ip_fw_drop(self):
        return 8
    
    #
    # Accessor methods for field: ip.rx_total
    #   Field type: short
    #   Offset (bits): 200
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.rx_total' is signed (False).
    #
    def isSigned_ip_rx_total(self):
        return False
    
    #
    # Return whether the field 'ip.rx_total' is an array (False).
    #
    def isArray_ip_rx_total(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.rx_total'
    #
    def offset_ip_rx_total(self):
        return (200 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.rx_total'
    #
    def offsetBits_ip_rx_total(self):
        return 200
    
    #
    # Return the value (as a short) of the field 'ip.rx_total'
    #
    def get_ip_rx_total(self):
        return self.getUIntElement(self.offsetBits_ip_rx_total(), 8, 1)
    
    #
    # Set the value of the field 'ip.rx_total'
    #
    def set_ip_rx_total(self, value):
        self.setUIntElement(self.offsetBits_ip_rx_total(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.rx_total'
    #
    def size_ip_rx_total(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.rx_total'
    #
    def sizeBits_ip_rx_total(self):
        return 8
    
    #
    # Accessor methods for field: ip.encfail
    #   Field type: short
    #   Offset (bits): 208
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.encfail' is signed (False).
    #
    def isSigned_ip_encfail(self):
        return False
    
    #
    # Return whether the field 'ip.encfail' is an array (False).
    #
    def isArray_ip_encfail(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.encfail'
    #
    def offset_ip_encfail(self):
        return (208 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.encfail'
    #
    def offsetBits_ip_encfail(self):
        return 208
    
    #
    # Return the value (as a short) of the field 'ip.encfail'
    #
    def get_ip_encfail(self):
        return self.getUIntElement(self.offsetBits_ip_encfail(), 8, 1)
    
    #
    # Set the value of the field 'ip.encfail'
    #
    def set_ip_encfail(self, value):
        self.setUIntElement(self.offsetBits_ip_encfail(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.encfail'
    #
    def size_ip_encfail(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.encfail'
    #
    def sizeBits_ip_encfail(self):
        return 8
    
    #
    # Accessor methods for field: route.hop_limit
    #   Field type: short
    #   Offset (bits): 216
    #   Size (bits): 8
    #

    #
    # Return whether the field 'route.hop_limit' is signed (False).
    #
    def isSigned_route_hop_limit(self):
        return False
    
    #
    # Return whether the field 'route.hop_limit' is an array (False).
    #
    def isArray_route_hop_limit(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'route.hop_limit'
    #
    def offset_route_hop_limit(self):
        return (216 / 8)
    
    #
    # Return the offset (in bits) of the field 'route.hop_limit'
    #
    def offsetBits_route_hop_limit(self):
        return 216
    
    #
    # Return the value (as a short) of the field 'route.hop_limit'
    #
    def get_route_hop_limit(self):
        return self.getUIntElement(self.offsetBits_route_hop_limit(), 8, 1)
    
    #
    # Set the value of the field 'route.hop_limit'
    #
    def set_route_hop_limit(self, value):
        self.setUIntElement(self.offsetBits_route_hop_limit(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'route.hop_limit'
    #
    def size_route_hop_limit(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'route.hop_limit'
    #
    def sizeBits_route_hop_limit(self):
        return 8
    
    #
    # Accessor methods for field: route.parent
    #   Field type: int
    #   Offset (bits): 224
    #   Size (bits): 16
    #

    #
    # Return whether the field 'route.parent' is signed (False).
    #
    def isSigned_route_parent(self):
        return False
    
    #
    # Return whether the field 'route.parent' is an array (False).
    #
    def isArray_route_parent(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'route.parent'
    #
    def offset_route_parent(self):
        return (224 / 8)
    
    #
    # Return the offset (in bits) of the field 'route.parent'
    #
    def offsetBits_route_parent(self):
        return 224
    
    #
    # Return the value (as a int) of the field 'route.parent'
    #
    def get_route_parent(self):
        return self.getUIntElement(self.offsetBits_route_parent(), 16, 1)
    
    #
    # Set the value of the field 'route.parent'
    #
    def set_route_parent(self, value):
        self.setUIntElement(self.offsetBits_route_parent(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'route.parent'
    #
    def size_route_parent(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'route.parent'
    #
    def sizeBits_route_parent(self):
        return 16
    
    #
    # Accessor methods for field: route.parent_metric
    #   Field type: int
    #   Offset (bits): 240
    #   Size (bits): 16
    #

    #
    # Return whether the field 'route.parent_metric' is signed (False).
    #
    def isSigned_route_parent_metric(self):
        return False
    
    #
    # Return whether the field 'route.parent_metric' is an array (False).
    #
    def isArray_route_parent_metric(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'route.parent_metric'
    #
    def offset_route_parent_metric(self):
        return (240 / 8)
    
    #
    # Return the offset (in bits) of the field 'route.parent_metric'
    #
    def offsetBits_route_parent_metric(self):
        return 240
    
    #
    # Return the value (as a int) of the field 'route.parent_metric'
    #
    def get_route_parent_metric(self):
        return self.getUIntElement(self.offsetBits_route_parent_metric(), 16, 1)
    
    #
    # Set the value of the field 'route.parent_metric'
    #
    def set_route_parent_metric(self, value):
        self.setUIntElement(self.offsetBits_route_parent_metric(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'route.parent_metric'
    #
    def size_route_parent_metric(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'route.parent_metric'
    #
    def sizeBits_route_parent_metric(self):
        return 16
    
    #
    # Accessor methods for field: route.parent_etx
    #   Field type: int
    #   Offset (bits): 256
    #   Size (bits): 16
    #

    #
    # Return whether the field 'route.parent_etx' is signed (False).
    #
    def isSigned_route_parent_etx(self):
        return False
    
    #
    # Return whether the field 'route.parent_etx' is an array (False).
    #
    def isArray_route_parent_etx(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'route.parent_etx'
    #
    def offset_route_parent_etx(self):
        return (256 / 8)
    
    #
    # Return the offset (in bits) of the field 'route.parent_etx'
    #
    def offsetBits_route_parent_etx(self):
        return 256
    
    #
    # Return the value (as a int) of the field 'route.parent_etx'
    #
    def get_route_parent_etx(self):
        return self.getUIntElement(self.offsetBits_route_parent_etx(), 16, 1)
    
    #
    # Set the value of the field 'route.parent_etx'
    #
    def set_route_parent_etx(self, value):
        self.setUIntElement(self.offsetBits_route_parent_etx(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'route.parent_etx'
    #
    def size_route_parent_etx(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'route.parent_etx'
    #
    def sizeBits_route_parent_etx(self):
        return 16
    
    #
    # Accessor methods for field: rssi
    #   Field type: int
    #   Offset (bits): 272
    #   Size (bits): 16
    #

    #
    # Return whether the field 'rssi' is signed (False).
    #
    def isSigned_rssi(self):
        return False
    
    #
    # Return whether the field 'rssi' is an array (False).
    #
    def isArray_rssi(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'rssi'
    #
    def offset_rssi(self):
        return (272 / 8)
    
    #
    # Return the offset (in bits) of the field 'rssi'
    #
    def offsetBits_rssi(self):
        return 272
    
    #
    # Return the value (as a int) of the field 'rssi'
    #
    def get_rssi(self):
        return self.getUIntElement(self.offsetBits_rssi(), 16, 1)
    
    #
    # Set the value of the field 'rssi'
    #
    def set_rssi(self, value):
        self.setUIntElement(self.offsetBits_rssi(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'rssi'
    #
    def size_rssi(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'rssi'
    #
    def sizeBits_rssi(self):
        return 16
    
    #
    # Accessor methods for field: temp
    #   Field type: int
    #   Offset (bits): 288
    #   Size (bits): 16
    #

    #
    # Return whether the field 'temp' is signed (False).
    #
    def isSigned_temp(self):
        return False
    
    #
    # Return whether the field 'temp' is an array (False).
    #
    def isArray_temp(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'temp'
    #
    def offset_temp(self):
        return (288 / 8)
    
    #
    # Return the offset (in bits) of the field 'temp'
    #
    def offsetBits_temp(self):
        return 288
    
    #
    # Return the value (as a int) of the field 'temp'
    #
    def get_temp(self):
        return self.getUIntElement(self.offsetBits_temp(), 16, 1)
    
    #
    # Set the value of the field 'temp'
    #
    def set_temp(self, value):
        self.setUIntElement(self.offsetBits_temp(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'temp'
    #
    def size_temp(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'temp'
    #
    def sizeBits_temp(self):
        return 16
    
    #
    # Accessor methods for field: hum
    #   Field type: int
    #   Offset (bits): 304
    #   Size (bits): 16
    #

    #
    # Return whether the field 'hum' is signed (False).
    #
    def isSigned_hum(self):
        return False
    
    #
    # Return whether the field 'hum' is an array (False).
    #
    def isArray_hum(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'hum'
    #
    def offset_hum(self):
        return (304 / 8)
    
    #
    # Return the offset (in bits) of the field 'hum'
    #
    def offsetBits_hum(self):
        return 304
    
    #
    # Return the value (as a int) of the field 'hum'
    #
    def get_hum(self):
        return self.getUIntElement(self.offsetBits_hum(), 16, 1)
    
    #
    # Set the value of the field 'hum'
    #
    def set_hum(self, value):
        self.setUIntElement(self.offsetBits_hum(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'hum'
    #
    def size_hum(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'hum'
    #
    def sizeBits_hum(self):
        return 16
    
    #
    # Accessor methods for field: par
    #   Field type: int
    #   Offset (bits): 320
    #   Size (bits): 16
    #

    #
    # Return whether the field 'par' is signed (False).
    #
    def isSigned_par(self):
        return False
    
    #
    # Return whether the field 'par' is an array (False).
    #
    def isArray_par(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'par'
    #
    def offset_par(self):
        return (320 / 8)
    
    #
    # Return the offset (in bits) of the field 'par'
    #
    def offsetBits_par(self):
        return 320
    
    #
    # Return the value (as a int) of the field 'par'
    #
    def get_par(self):
        return self.getUIntElement(self.offsetBits_par(), 16, 1)
    
    #
    # Set the value of the field 'par'
    #
    def set_par(self, value):
        self.setUIntElement(self.offsetBits_par(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'par'
    #
    def size_par(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'par'
    #
    def sizeBits_par(self):
        return 16
    
    #
    # Accessor methods for field: tsr
    #   Field type: int
    #   Offset (bits): 336
    #   Size (bits): 16
    #

    #
    # Return whether the field 'tsr' is signed (False).
    #
    def isSigned_tsr(self):
        return False
    
    #
    # Return whether the field 'tsr' is an array (False).
    #
    def isArray_tsr(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'tsr'
    #
    def offset_tsr(self):
        return (336 / 8)
    
    #
    # Return the offset (in bits) of the field 'tsr'
    #
    def offsetBits_tsr(self):
        return 336
    
    #
    # Return the value (as a int) of the field 'tsr'
    #
    def get_tsr(self):
        return self.getUIntElement(self.offsetBits_tsr(), 16, 1)
    
    #
    # Set the value of the field 'tsr'
    #
    def set_tsr(self, value):
        self.setUIntElement(self.offsetBits_tsr(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'tsr'
    #
    def size_tsr(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'tsr'
    #
    def sizeBits_tsr(self):
        return 16
    
    #
    # Accessor methods for field: battvol
    #   Field type: int
    #   Offset (bits): 352
    #   Size (bits): 16
    #

    #
    # Return whether the field 'battvol' is signed (False).
    #
    def isSigned_battvol(self):
        return False
    
    #
    # Return whether the field 'battvol' is an array (False).
    #
    def isArray_battvol(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'battvol'
    #
    def offset_battvol(self):
        return (352 / 8)
    
    #
    # Return the offset (in bits) of the field 'battvol'
    #
    def offsetBits_battvol(self):
        return 352
    
    #
    # Return the value (as a int) of the field 'battvol'
    #
    def get_battvol(self):
        return self.getUIntElement(self.offsetBits_battvol(), 16, 1)
    
    #
    # Set the value of the field 'battvol'
    #
    def set_battvol(self, value):
        self.setUIntElement(self.offsetBits_battvol(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'battvol'
    #
    def size_battvol(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'battvol'
    #
    def sizeBits_battvol(self):
        return 16
    
    #
    # Accessor methods for field: solarvol
    #   Field type: int
    #   Offset (bits): 368
    #   Size (bits): 16
    #

    #
    # Return whether the field 'solarvol' is signed (False).
    #
    def isSigned_solarvol(self):
        return False
    
    #
    # Return whether the field 'solarvol' is an array (False).
    #
    def isArray_solarvol(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'solarvol'
    #
    def offset_solarvol(self):
        return (368 / 8)
    
    #
    # Return the offset (in bits) of the field 'solarvol'
    #
    def offsetBits_solarvol(self):
        return 368
    
    #
    # Return the value (as a int) of the field 'solarvol'
    #
    def get_solarvol(self):
        return self.getUIntElement(self.offsetBits_solarvol(), 16, 1)
    
    #
    # Set the value of the field 'solarvol'
    #
    def set_solarvol(self, value):
        self.setUIntElement(self.offsetBits_solarvol(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'solarvol'
    #
    def size_solarvol(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'solarvol'
    #
    def sizeBits_solarvol(self):
        return 16
    
    #
    # Accessor methods for field: solarcur
    #   Field type: int
    #   Offset (bits): 384
    #   Size (bits): 16
    #

    #
    # Return whether the field 'solarcur' is signed (False).
    #
    def isSigned_solarcur(self):
        return False
    
    #
    # Return whether the field 'solarcur' is an array (False).
    #
    def isArray_solarcur(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'solarcur'
    #
    def offset_solarcur(self):
        return (384 / 8)
    
    #
    # Return the offset (in bits) of the field 'solarcur'
    #
    def offsetBits_solarcur(self):
        return 384
    
    #
    # Return the value (as a int) of the field 'solarcur'
    #
    def get_solarcur(self):
        return self.getUIntElement(self.offsetBits_solarcur(), 16, 1)
    
    #
    # Set the value of the field 'solarcur'
    #
    def set_solarcur(self, value):
        self.setUIntElement(self.offsetBits_solarcur(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'solarcur'
    #
    def size_solarcur(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'solarcur'
    #
    def sizeBits_solarcur(self):
        return 16
    
    #
    # Accessor methods for field: intvol
    #   Field type: int
    #   Offset (bits): 400
    #   Size (bits): 16
    #

    #
    # Return whether the field 'intvol' is signed (False).
    #
    def isSigned_intvol(self):
        return False
    
    #
    # Return whether the field 'intvol' is an array (False).
    #
    def isArray_intvol(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'intvol'
    #
    def offset_intvol(self):
        return (400 / 8)
    
    #
    # Return the offset (in bits) of the field 'intvol'
    #
    def offsetBits_intvol(self):
        return 400
    
    #
    # Return the value (as a int) of the field 'intvol'
    #
    def get_intvol(self):
        return self.getUIntElement(self.offsetBits_intvol(), 16, 1)
    
    #
    # Set the value of the field 'intvol'
    #
    def set_intvol(self, value):
        self.setUIntElement(self.offsetBits_intvol(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'intvol'
    #
    def size_intvol(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'intvol'
    #
    def sizeBits_intvol(self):
        return 16
    
    #
    # Accessor methods for field: ecount
    #   Field type: long
    #   Offset (bits): 416
    #   Size (bits): 32
    #

    #
    # Return whether the field 'ecount' is signed (False).
    #
    def isSigned_ecount(self):
        return False
    
    #
    # Return whether the field 'ecount' is an array (False).
    #
    def isArray_ecount(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ecount'
    #
    def offset_ecount(self):
        return (416 / 8)
    
    #
    # Return the offset (in bits) of the field 'ecount'
    #
    def offsetBits_ecount(self):
        return 416
    
    #
    # Return the value (as a long) of the field 'ecount'
    #
    def get_ecount(self):
        return self.getUIntElement(self.offsetBits_ecount(), 32, 1)
    
    #
    # Set the value of the field 'ecount'
    #
    def set_ecount(self, value):
        self.setUIntElement(self.offsetBits_ecount(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ecount'
    #
    def size_ecount(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'ecount'
    #
    def sizeBits_ecount(self):
        return 32
    
    #
    # Accessor methods for field: blockID
    #   Field type: long
    #   Offset (bits): 448
    #   Size (bits): 32
    #

    #
    # Return whether the field 'blockID' is signed (False).
    #
    def isSigned_blockID(self):
        return False
    
    #
    # Return whether the field 'blockID' is an array (False).
    #
    def isArray_blockID(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'blockID'
    #
    def offset_blockID(self):
        return (448 / 8)
    
    #
    # Return the offset (in bits) of the field 'blockID'
    #
    def offsetBits_blockID(self):
        return 448
    
    #
    # Return the value (as a long) of the field 'blockID'
    #
    def get_blockID(self):
        return self.getUIntElement(self.offsetBits_blockID(), 32, 1)
    
    #
    # Set the value of the field 'blockID'
    #
    def set_blockID(self, value):
        self.setUIntElement(self.offsetBits_blockID(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'blockID'
    #
    def size_blockID(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'blockID'
    #
    def sizeBits_blockID(self):
        return 32
    
